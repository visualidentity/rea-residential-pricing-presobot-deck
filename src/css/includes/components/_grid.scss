
// --------------------------------------------------------
// Grid
// --------------------------------------------------------

.column-group {
	@include clear;
	margin-bottom: $gutter-default;

	&.column--rounded-corners {
		.column {
			border-radius: $border-radius;
		}
	}

	.column {
		float: left;
		margin-left: $gutter-default;
		padding: 0;
		position: relative;
		width: $column-width-default;

		&:first-child, &.first-child {
			margin-left: 0;
		}

		// bg colour column modifiers
		@each $key, $value in $colour-list {
			&.column--bg-#{$key} {
				background-color: $value;
			}
		}

		// rounded corners modifier
		&.column--rounded-corners {
			border-radius: $border-radius;
		}


		// create default grid
		@for $col-index from 1 through $grid-size-default {
			$col-width: nth($column-widths, $col-index);

			@if $col-index == 1 {
				$col-width: ($col-width * $col-index);
			} @else {
				$col-width: ($col-width * $col-index) + (nth($grid-gutters, $col-index) * ($col-index - 1));
			}

			// needs to be reworked so not relying on working out column-widths before
			&.column--span-#{$col-index} {
				width: $col-width;
			}
		}
	}

	// bg colour grid modifiers
	@each $key, $value in $colour-list {
		&.column-group--bg-#{$key} {
			background-color: $value;
		}
	}

	// full height grid modifier
	&.column-group--height-full {
		margin-bottom: 0;

		> .column {
			height: $content-height;
		}
	}

	// three quarter height grid modifier
	&.column-group--height-three-quarter {
		> .column {
			height: (($content-height/4) * 3) - $gutter-default;
		}
	}

	// two third height grid modifier
	&.column-group--height-two-third {
		> .column {
			height: (($content-height/3) * 2) - $gutter-default;
		}
	}

	// half height grid modifier
	&.column-group--height-half {
		> .column {
			height: ($content-height/2) - $gutter-default;
		}
	}

	// one-third height grid modifier
	&.column-group--height-one-third {
		> .column {
			height: ($content-height/3);
		}
	}

	// one-quarter height grid modifier
	&.column-group--height-one-quarter {
		> .column {
			height: ($content-height/4);
		}
	}


	// collapsed modifier
	&.column-group--collapsed {
		.column {
			$col-width-collapsed: floor($content-width/$grid-size-default);
			$space-remaining: $content-width - ($col-width-collapsed * $grid-size-default);

			margin-left: 0;
			width: $col-width-collapsed;


			// if remaining space is a whole number...
			@if round($space-remaining) == $space-remaining {
				&:first-child, &.first-child,
				&:last-child, &.last-child { width: $col-width-collapsed + ($space-remaining/2); }
			} @else {
				&:first-child, &.first-child { width: $col-width-collapsed + floor($space-remaining/2); }
				&:last-child, &.last-child { width: $col-width-collapsed + ceil($space-remaining/2); }
			}

			&:after {
				background: colour(bluestone);
				bottom: 70px;
				content: '';
				display: block;
				opacity: .5;
				position: absolute;
				right: 0;
				top: 112px;
				width: 1px;
				z-index: 10;
			}

			&:last-child, &.last-child {
				&:after { display: none; }
			}
		}
	}


	// loop through $grid-sizes and generate grid css...
	@for $i from 1 through length($grid-sizes) {
		&.column-group--#{nth($grid-sizes, $i)} {
			.column {
				margin-left: nth($grid-gutters, $i);

				@for $col-index from 1 through nth($grid-sizes, $i) {
					$col-width: nth($column-widths, $i);

					@if $col-index == 1 {
						$col-width: ($col-width * $col-index);
					} @else {
						$col-width: ($col-width * $col-index) + (nth($grid-gutters, $i) * ($col-index - 1));
					}

					// needs to be reworked so not relying on working out column-widths before
				    &.column--span-#{$col-index} {
						width: $col-width;

						@if nth($grid-sizes, $i) == 3 or nth($grid-sizes, $i) == 8 {

							&:first-child, &.first-child {
								width: $col-width - 1;
							}
							&:last-child, &.last-child {
								width: $col-width - 1;
							}

						} @else if nth($grid-sizes, $i) == 7 or nth($grid-sizes, $i) == 14 {

							&:first-child, &.first-child {
								width: $col-width + 1;
							}
							&:last-child, &.last-child {
								width: $col-width + 1;
							}

						} @else if nth($grid-sizes, $i) == 11 {

							&:first-child, &.first-child {
								width: $col-width + 2;
							}
							&:last-child, &.last-child {
								width: $col-width + 3;
							}

						} @else if nth($grid-sizes, $i) == 12 {

							&:first-child, &.first-child {
								width: $col-width - 3;
							}
							&:last-child, &.last-child {
								width: $col-width - 3;
							}

						} @else if nth($grid-sizes, $i) == 13 {

							&:first-child, &.first-child {
								width: $col-width + 3;
							}
							&:last-child, &.last-child {
								width: $col-width + 4;
							}
						}
				    }
				}

				&:first-child, &.first-child {
					margin-left: 0;
				}
			}

			// collapsed grid - no margins
			&.column-group--collapsed {
				.column {
					$col-width-collapsed-single: floor($content-width/nth($grid-sizes, $i));
					$space-remaining: $content-width - ($col-width-collapsed-single * nth($grid-sizes, $i));

					margin-left: 0;


					@for $col-index from 1 through nth($grid-sizes, $i) {
						$col-width-collapsed: ($col-width-collapsed-single * $col-index);

						&.column--span-#{$col-index} {
							width: $col-width-collapsed;

							// if remaining space is a whole number...
							@if round($space-remaining) == $space-remaining {
								&:first-child, &.first-child,
								&:last-child, &.last-child { width: $col-width-collapsed + ($space-remaining/2); }
							} @else {
								&:first-child, &.first-child { width: $col-width-collapsed + floor($space-remaining/2); }
								&:last-child, &.last-child { width: $col-width-collapsed + ceil($space-remaining/2); }
							}
						}
					}
				}
			}
		}
	}
	&.column-group--animated {
		.column {
			position: relative;
			opacity: 0;
			top: 30px;
			@include transition(
				opacity 0.4s ease-out,
				top 0.4s ease-out
			);
		}
		@for $i from 1 through 10 {
			&:nth-child(#{$i}) {
				@for $j from 1 through 15 {
					.column {
						@for $k from 1 through 15 {
							&.column--span-#{$k} {
								&:nth-child(#{$j}) {
									$delay: ($j * $i) - 1;
									@include transition-delay(50ms * $delay * $k);
								}
							}
						}
					}
				}
			}
		}
	}

	// Removable
	&.column-group--removable {
		// Removable column-group animation classes
		@include transition(height 250ms $easeout 0ms);

		&.column-group--0 {
			height: 0 !important;
			@include transition(height 250ms $easeout 255ms);
		}

		.column {
			overflow: hidden;

			.remove-icon {
				position: absolute;
				top: 0;
				right: 0;
			}

			// Removable animation classes
			// @include transition(
			// 	opacity 500ms $easeout 0ms,
			// 	width 500ms $easeout 0ms,
			// 	margin-left 500ms $easeout 0ms
			// );

			&.inactive {
				width: 0px !important;
				margin-left: 0px !important;
				opacity: 0;
			}
		}

		&.column-group--animated {
			@for $i from 1 through 10 {
				&:nth-child(#{$i}) {
					@for $j from 1 through 15 {
						.column {
							@for $k from 1 through 15 {
								&.column--span-#{$k} {
									&:nth-child(#{$j}) {
										$delay: ($j * $i) - 1;
										// @include transition(
										// 	opacity 0.4s ease-out (50ms * $delay * $k),
										// 	top 0.4s ease-out (50ms * $delay * $k),
										// 	width 500ms $easeout 0ms,
										// 	margin-left 500ms $easeout 0ms
										// );
									}
								}
							}
						}
					}
				}
			}
		}

	}
} // EO .column-group

.currentpage, .animation-complete, .ie9 {
	.column-group.column-group--animated {
		.column {
			top: 0;
			opacity: 1;
		}
	}
}

.animation-complete, .ie9 {
	.column-group.column-group--animated {
		.column {
			@include transition(none !important);
		}
	}
}

// column-group height modifier - based on 'slide-header' class - half height grid modifier
.slide-header--two-lines {
	& + .content {
		.column-group {
			&.column-group--height-half {
				.column {
					height: ($content-height-trim/2) - ($gutter-default/2);
				}
			}
		} // EO .column-group
	}
}
