
//----------------------------------------------------------------------------//
//--- Vendor Prefix Variables ------------------------------------------------//
//----------------------------------------------------------------------------//
$prefix-for-webkit:    true !default;
$prefix-for-mozilla:   true !default;
$prefix-for-microsoft: true !default;
$prefix-for-opera:     true !default;
$prefix-for-spec:      true !default; // required for keyframe mixin

//This should only ever be turned on if client is paying for legacy IE support
// Legacy = less than IE9
$support-legacy-ie:    false !default;


//----------------------------------------------------------------------------//
//--- Easing Variables -------------------------------------------------------//
//----------------------------------------------------------------------------//

$easeInSine:    cubic-bezier(0.47, 0, 0.745, 0.715);
$easeOutSine:   cubic-bezier(0.39, 0.575, 0.565, 1);
$easeInOutSine: cubic-bezier(0.445, 0.05, 0.55, 0.95);

$easeInQuad:    cubic-bezier(0.55, 0.085, 0.68, 0.53);
$easeOutQuad:   cubic-bezier(0.25, 0.46, 0.45, 0.94);
$easeInOutQuad: cubic-bezier(0.455, 0.03, 0.515, 0.955);

$easeInCubic:    cubic-bezier(0.55, 0.055, 0.675, 0.19);
$easeOutCubic:   cubic-bezier(0.215, 0.61, 0.355, 1);
$easeInOutCubic: cubic-bezier(0.645, 0.045, 0.355, 1);

$easeInQuart:    cubic-bezier(0.895, 0.03, 0.685, 0.22);
$easeOutQuart:   cubic-bezier(0.165, 0.84, 0.44, 1);
$easeInOutQuart: cubic-bezier(0.77, 0, 0.175, 1);

$easeInQuint:    cubic-bezier(0.755, 0.05, 0.855, 0.06);
$easeOutQuint:   cubic-bezier(0.23, 1, 0.32, 1);
$easeInOutQuint: cubic-bezier(0.86, 0, 0.07, 1);

$easeInExpo:    cubic-bezier(0.95, 0.05, 0.795, 0.035);
$easeOutExpo:   cubic-bezier(0.19, 1, 0.22, 1);
$easeInOutExpo: cubic-bezier(1, 0, 0, 1);

$easeInCirc:    cubic-bezier(0.6, 0.04, 0.98, 0.335);
$easeOutCirc:   cubic-bezier(0.075, 0.82, 0.165, 1);
$easeInOutCirc: cubic-bezier(0.785, 0.135, 0.15, 0.86);

$easeInBack:    cubic-bezier(0.6, -0.28, 0.735, 0.045);
$easeOutBack:   cubic-bezier(0.175, 0.885, 0.32, 1.275);
$easeInOutBack: cubic-bezier(0.68, -0.55, 0.265, 1.55);

// Material design ease out
$easeout: cubic-bezier(0.0, 0.0, 0.2, 1);

//----------------------------------------------------------------------------//




//----------------------------------------------------------------------------//
//----------------------------------------------------------------------------//
//--- Mixins -----------------------------------------------------------------//
//----------------------------------------------------------------------------//
//----------------------------------------------------------------------------//

@mixin transform-origin($axes: 50%) {
// x-axis - left | center | right  | length | %
// y-axis - top  | center | bottom | length | %
// z-axis -                          length
  @include prefixer(transform-origin, $axes, webkit moz ms o spec);
}

@mixin transform-style ($style: flat) {
  @include prefixer(transform-style, $style, webkit moz ms o spec);
}


//----------------------------------------------------------------------------//
//--- Longhand css animation properties --------------------------------------//
//----------------------------------------------------------------------------//

// This mixin provides basic support for CSS3 properties and
// their corresponding experimental CSS2 properties when
// the implementations are identical except for the property
// prefix.

//@include animation-longform($name, $duration, $delay, $timing-function, $iteration-count, $direction, $fill-mode, $transform-origin);

@mixin animation-longform(
  $name:false,
  $duration:false,
  $delay:false,
  $timing-function:false,
  $iteration-count:false,
  $direction:false,
  $fill-mode:false,
  $transform-origin:false
) {
  @if $name               != false { @include animation-name($name); }
  @if $duration           != false { @include animation-duration($duration); }
  @if $delay              != false { @include animation-delay($delay); }
  @if $timing-function    != false { @include animation-timing-function($timing-function); }
  @if $iteration-count    != false { @include animation-iteration-count($iteration-count); }
  @if $direction          != false { @include animation-direction($direction); }
  @if $fill-mode          != false { @include animation-fill-mode($fill-mode); }
  @if $transform-origin   != false { @include transform-origin($transform-origin); }
}

//Legacy naming
// THIS SHALL BE DEPRECATED when LOZ & BENJI have a optimisation powow!
@mixin animateObject(
  $name:false,
  $duration:false,
  $delay:false,
  $iteration-count:false,
  $direction:false,
  $fill-mode:false,
  $timing-function:false
) {
  @include animation-longform($name,$duration,$delay,$iteration-count,$direction,$fill-mode,$timing-function);
}


//----------------------------------------------------------------------------//
//--- SpriteWingman makeKeyframes --------------------------------------------//
//----------------------------------------------------------------------------//

// This does the magic of taking the array of timings from generator and making
// a set of keyframes based on them. It also takes the dimensions of sprite and
// sets the offset for each frame

@mixin makeKeyframes($name, $duration, $frameDuration, $width, $height) {

  @include keyframes($name){

    $count: 0%;

    @for $i from 1 through length($frameDuration) {

        $current: nth($frameDuration, $i);
        $frameDurationPercentage: ($current/$duration * 100); //Calculate the percentage

        #{$count} { background-position: #{$i * $width} 0px; }

        $count: $count + $frameDurationPercentage; //Increment up the animation

    } //EO @for
  } //EO keyframes

}

// Resize anything
@mixin resizable($direction) {
  resize: $direction; // Options: horizontal, vertical, both
  overflow: auto; // Safari fix
}

// CSS3 Content Columns
@mixin content-columns($columnCount, $columnGap: $gridGutterWidth) {
  @include prefixer(column-count, $columnCount, webkit moz spec);
  @include prefixer(column-gap, $columnGap, webkit moz spec);
}

// Border Radius
@mixin border-radius($radii) {
  @include prefixer(border-radius, $radii, spec);
}


// Single Corner Border Radius
@mixin border-top-left-radius($radii) {
  @include prefixer(border-top-left-radius, $radii, spec);
}

@mixin border-top-right-radius($radii) {
  @include prefixer(border-top-right-radius, $radii, spec);
}

@mixin border-bottom-left-radius($radii) {
  @include prefixer(border-bottom-left-radius, $radii, spec);
}

@mixin border-bottom-right-radius($radii) {
  @include prefixer(border-bottom-right-radius, $radii, spec);
}

// Single Side Border Radius
@mixin border-top-radius($radii) {
  @include prefixer(border-top-left-radius, $radii, spec);
  @include prefixer(border-top-right-radius, $radii, spec);
}

@mixin border-bottom-radius($radii) {
  @include prefixer(border-bottom-left-radius, $radii, spec);
  @include prefixer(border-bottom-right-radius, $radii, spec);
}

@mixin border-left-radius($radii) {
  @include prefixer(border-top-left-radius, $radii, spec);
  @include prefixer(border-bottom-left-radius, $radii, spec);
}

@mixin border-right-radius($radii) {
  @include prefixer(border-top-right-radius, $radii, spec);
  @include prefixer(border-bottom-right-radius, $radii, spec);
}


// Background sizing
@mixin background-size($size) {
  @include prefixer(background-size, $size, spec);
}

//Transform Shorthand
@mixin rotate($degrees) {
  @include prefixer(transform, rotate($degrees), webkit ms spec);
}
@mixin rotateX($degrees) {
  @include prefixer(transform, rotateX($degrees), webkit ms spec);
}
@mixin rotateY($degrees) {
  @include prefixer(transform, rotateY($degrees), webkit ms spec);
}
@mixin rotateZ($degrees) {
  @include prefixer(transform, rotateZ($degrees), webkit ms spec);
}
@mixin scale($ratio) {
  @include prefixer(transform, scale($ratio), webkit ms spec);
}
@mixin scaleX($ratio) {
  @include prefixer(transform, scaleX($ratio), webkit ms spec);
}
@mixin scaleY($ratio) {
  @include prefixer(transform, scaleY($ratio), webkit ms spec);
}
@mixin translate($x, $y) {
  @include prefixer(transform, translate($x, $y), webkit ms spec);
}
@mixin translateX($z) {
  @include prefixer(transform, translateX($z), webkit ms spec);
}
@mixin translateY($z) {
  @include prefixer(transform, translateY($z), webkit ms spec);
}
@mixin translateZ($z) {
  @include prefixer(transform, translateZ($z), webkit ms spec);
}
@mixin skew($x, $y) {
  @include prefixer(transform, skew($x, $y), webkit ms spec);
  // @include backface-visibility(hidden); // See https://github.com/twitter/bootstrap/issues/5319
}
@mixin translate3d($x, $y, $z) {
  @include prefixer(transform, translate3d($x, $y, $z), webkit spec);
}

@mixin ms-less-translate($x, $y) {
  @include prefixer(transform, translate($x, $y), webkit spec);
}
@mixin ms-less-scale($ratio) {
  @include prefixer(transform, scale($ratio), webkit spec);
}
@mixin ms-less-rotate($degrees) {
  @include prefixer(transform, rotate($degrees), webkit spec);
}

@mixin clear() {
    &:before, &:after {
        content: "\0020";
        display: block;
        height: 0;
        overflow: hidden;
    }
    &:after {
        clear: both;
    }

    &:after {
        content: "";
        display: table;
        clear: both; }
    @if $support-legacy-ie == true {
    *zoom: 1;
    }
}


@mixin multiline-ellipsis($height, $lineheight, $ellipsiswidth) {

$ellipsiswidth: 3em !global;

  .ellipsis {
    overflow: hidden;
    height: $height;
    line-height: $lineheight; }

  .ellipsis:before {
    content:"";
    float: left;
    width: 5px; height: $height; }

  .ellipsis > *:first-child {
    float: right;
    width: 100%;
    margin-left: -5px; }

  .ellipsis:after {
    content: "\02026";

    float: right;
    position: relative;
    top: -14px;
    left: 100%;
    width: $ellipsiswidth;
    margin-left: -$ellipsiswidth;
    padding-right: 5px;

    text-align: right;
  }

}


// --------------------------------------------------------
// Vertical Aligment - @terrymasher
// --------------------------------------------------------
@mixin vertical-align($position: relative) {
	position: $position;
	top: 50%;
	-webkit-transform: translateY(-50%);
	-ms-transform: translateY(-50%);
	transform: translateY(-50%);
  @include backface-visibility(hidden);
}

// --------------------------------------------------------
// Letter Spacing - @terrymasher
// --------------------------------------------------------
@mixin letter-spacing($tracking) {
	letter-spacing: #{($tracking/1000)}em;
}

// --------------------------------------------------------
// Aspect Ratio Container - @terrymasher
// --------------------------------------------------------
@mixin aspect-ratio($width, $height, $class, $position: relative) {
	position: $position;

	&:before {
		content: "";
		display: block;
		padding-top: percentage($height / $width);
		width: 100%;
	}

	> .#{$class}__content {
		bottom: 0;
		left: 0;
		position: absolute;
		right: 0;
		top: 0;
	}
}



// --------------------------------------------------------
// arrows
// --------------------------------------------------------
// $direction: top, left, right, bottom, top-left, top-right, bottom-left, bottom-right
// $color: hex, rgb or rbga
// $size: px or em
// @example
// .element{
//     @include arrow(top, #000, 50px);
// }
@mixin arrow($direction, $color, $size){
    display: block;
    height: 0;
    width: 0;

    @if $direction == 'top' {
        border-left: $size solid transparent;
      border-right: $size solid transparent;
      border-bottom: $size solid $color;
    } @else if $direction == 'right' {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
      border-left: $size solid $color;
    } @else if $direction == 'bottom' {
        border-top: $size solid $color;
        border-right: $size solid transparent;
        border-left: $size solid transparent;
    } @else if $direction == 'left' {
        border-top: $size solid transparent;
      border-right: $size solid $color;
      border-bottom: $size solid transparent;
    } @else if $direction == 'top-left' {
        border-top: $size solid $color;
        border-right: $size solid transparent;
    } @else if $direction == 'top-right' {
        border-top: $size solid $color;
        border-left: $size solid transparent;
    } @else if $direction == 'bottom-left' {
        border-bottom: $size solid $color;
        border-right: $size solid transparent;
    } @else if $direction == 'bottom-right' {
        border-bottom: $size solid $color;
        border-left: $size solid transparent;
    }
}



// --------------------------------------------------------
// Breakpoints
// --------------------------------------------------------
// Good for the following
// $feature: min-width $value: n
// $feature: max-width $value: n
// $feature: min-height $value: n
// $feature: max-height $value: n
// $feature: orientation $value: portrait/landscape
// $feature: device-aspect-ratio $value: 16/9
// $feature: min-device-width $value: 640px
// $feature: min-device-height $value: 480px

@mixin respond-rule($feature,$value,$media:screen ){
    @media only #{$media} and ($feature: $value) { @content; }
}

// For cases where two features are required

@mixin respond-rule-two($feature, $value, $feature2, $value2, $media:screen){
    @media only #{$media} and ($feature: $value) and ($feature2: $value2) { @content; }
}

// Retina display Media Query
@mixin retina-background-image($image, $format:"png", $upgrade: false, $suffix: "-retina"){

  @if $upgrade == false {
    background-image: url($image+'.'+$format);
  }
  // @include backface-visibility(hidden);

  @media
  only screen and (-webkit-min-device-pixel-ratio: 2),
  only screen and (min--moz-device-pixel-ratio: 2),
  only screen and (-o-min-device-pixel-ratio: 2/1),
  only screen and (min-device-pixel-ratio: 2),
  only screen and (min-resolution: 192dpi),
  only screen and (min-resolution: 2dppx) {
    background-image: url($image+$suffix+'.'+$format);
  }
}


@mixin retina-background-div($truewidth, $trueheight, $actualwidth, $image, $format:"png", $upgrade: false, $suffix: "-retina") {

      $proportions: $trueheight/$truewidth;
      $height: round($actualwidth * $proportions);


      @include retina-background-image($image, $format, $upgrade, $suffix);

      width: $actualwidth;
      height:$height;
      background-size: $actualwidth $height;
}



@mixin svg-background-div($truewidth, $trueheight, $actualwidth, $image) {

      $proportions: $trueheight/$truewidth;
      $height: round($actualwidth * $proportions);

      background-image: url($image);

      width: $actualwidth;
      height:$height;
      background-size: $actualwidth $height;
}


//----------------------------------------------------------------------------//
//--- Gradient Functions -----------------------------------------------------//
//----------------------------------------------------------------------------//
// Functions required to use linear and radial gradients                      //
//----------------------------------------------------------------------------//
@function _linear-positions-parser($pos) {
  $type: type-of(nth($pos, 1));
  $spec: null;
  $degree: null;
  $side: null;
  $corner: null;
  $length: length($pos);
  // Parse Side and corner positions
  @if ($length > 1) {
    @if nth($pos, 1) == "to" { // Newer syntax
      $side: nth($pos, 2);

      @if $length == 2 { // eg. to top
        // Swap for backwards compatability
        $degree: _position-flipper(nth($pos, 2));
      }
      @else if $length == 3 { // eg. to top left
        $corner: nth($pos, 3);
      }
    }
    @else if $length == 2 { // Older syntax ("top left")
      $side: _position-flipper(nth($pos, 1));
      $corner: _position-flipper(nth($pos, 2));
    }

    @if ("#{$side} #{$corner}" == "left top") or ("#{$side} #{$corner}" == "top left") {
      $degree: _position-flipper(#{$side}) _position-flipper(#{$corner});
    }
    @else if ("#{$side} #{$corner}" == "right top") or ("#{$side} #{$corner}" == "top right") {
      $degree: _position-flipper(#{$side}) _position-flipper(#{$corner});
    }
    @else if ("#{$side} #{$corner}" == "right bottom") or ("#{$side} #{$corner}" == "bottom right") {
      $degree: _position-flipper(#{$side}) _position-flipper(#{$corner});
    }
    @else if ("#{$side} #{$corner}" == "left bottom") or ("#{$side} #{$corner}" == "bottom left") {
      $degree: _position-flipper(#{$side}) _position-flipper(#{$corner});
    }
    $spec: to $side $corner;
  }
  @else if $length == 1 {
    // Swap for backwards compatability
    @if $type == string {
      $degree: $pos;
      $spec: to _position-flipper($pos);
    }
    @else {
      $degree: -270 - $pos; //rotate the gradient opposite from spec
      $spec: $pos;
    }
  }
  $degree: unquote($degree + ",");
  $spec:   unquote($spec + ",");
  @return $degree $spec;
}



@function _position-flipper($pos) {
 @return if($pos == left, right, null)
         if($pos == right, left, null)
         if($pos == top, bottom, null)
         if($pos == bottom, top, null);
}



// --------------------------------------------------------
// Pie-chart segment generator
// --------------------------------------------------------
// Generates the necessary classes to draw
// e.g @include progressStates('data-value','&:after');
@mixin pie-segments($radius:100px, $doughnut-color:#f00, $doughnut-diameter:$radius, $base-styles:false){

  @if $base-styles == true {
    // .pie-chart {

    // standard styles here

    // } //EO .pie-chart
  }

  .segment {
    width: $radius;
    height: ($radius * 2);
    top: 0px;
    left: $radius;

    .before {
      width: $radius;
      height: ($radius * 2);
      left: -#{$radius};
      border-radius: $radius 0 0 $radius;
    }

    &.big {
      left: 0px;
      width: ($radius * 2);
      height: ($radius * 2);

      .before {
        left: 0px;
      }

    } // EO big
  }

}

@mixin pieSegmentStart-classes(){

  /*
    now rotate each piece based on their cumulative starting
    position
  */

  @for $i from 0 through 360 {
  $iVal: "#{$i}%";
    .segment[data-start="#{$i}"] {
      @include rotate(#{$i}deg);
    }
  }

}

@mixin pieSegmentValue-classes(){

  /*
    and rotate the amount of the pie that's showing.

    NOTE: add an extra degree to all but the final piece,
    to fill in unsightly gaps.
  */

  @for $i from 0 through 360 {
  $iVal: "#{$i}%";
    .segment[data-value="#{$i}"] .before {
      @include rotate(#{$i + 1}deg);
    }
  }

}




// --------------------------------------------------------
// Progress Bar / Bar Graph % state class generator
// --------------------------------------------------------
// Generates 100 classes for percentage an attribute value (between 0-100) and a selector to apply it to
// e.g @include progressStates('data-value','&:after');
//
@mixin progressValues($attribute:'data-value',$appliedTo:'&:after',$widthOrHeight:'width'){

  @for $i from 1 through 100 {
    $iVal: "#{$i}%";
      &[#{$attribute}="#{$i}"] { #{$appliedTo} { #{$widthOrHeight}: #{$iVal}; } }
  }

}



// --------------------------------------------------------
// Progress Bar % state class generator
// --------------------------------------------------------
// Generates 100 classes for percentage an attribute value (between 0-100) and a selector to apply it to
// e.g @include progressStates('data-value','&:after');
//

@mixin iterateNthChild($count:10,$content:true){

  @for $i from 0 through $count {

    @if $content == true {
      &:nth-child(#{$i}) { @content; }
    } @else {
      &:nth-child(#{$i}) { z-index: #{$count - $i}; }
    }

  }

}


// --------------------------------------------------------
// Unit Conversion (px <=> rem)
// --------------------------------------------------------
// u is a Function that replaces default units in css.
// It can be used to make designing with relative numbers easier
// as it's possible to use px as a base which is then converted
// into rem on compilation of the CSS.
// Basic Usage:
// px to rem    u(24px);
// rem to px    u(2rem);
// multiple values  u(24px 32px 10px 14px);

// config
$px-only:   false   !global;
$pixelBase: 14    !global; /* 1 */

@function parseInt($n) {
  @return $n / ($n * 0 + 1); /* 2 */
}

@function u($values){ /* 3 */

      $list: (); /* 4 */

      @each $value in $values { /* 5 */

            $unit : unit($value); /* 6 */
            $val  : parseInt($value); /* 2 */

            @if ($px-only) and ($unit == 'rem') { /* 7 */
                  $list: append($list, ($val * $pixelBase) + px); /* 7 */
            }

            @else if($unit == 'px') or ($unit == 'rem'){ /* 8 */
                  $list: append($list, $value); /* 8 */
            }

            @else {
                  @warn 'There is no unit conversion for #{$unit}'; /* 9 */
            }

      }

      @return $list(); /* 10 */

}


@mixin gradient-vertical($start-color: #555, $end-color: #333, $start-percent: 0%, $end-percent: 100%) {
  background-image: -webkit-linear-gradient(top, $start-color $start-percent, $end-color $end-percent);  // Safari 5.1-6, Chrome 10+
  background-image: -o-linear-gradient(top, $start-color $start-percent, $end-color $end-percent);  // Opera 12
  background-image: linear-gradient(to bottom, $start-color $start-percent, $end-color $end-percent); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
  background-repeat: repeat-x;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=0); // IE9 and down
}