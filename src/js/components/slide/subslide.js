class SubSlide {
  /**
   * Subslide (these are automatically generated by Slide)
   *
   * @param {SubSlide} options - options
   * @param {Slide} options.slide - The parent slide
   * @param {Object} options.subslide - The presenter object of the subslide
   * @param {number} options.index - The index of the subslide
   * @param {Object} options.el - The HTML element of the subslide
   * @param {Object} options.pageContainer - The HTML element of the slide
   */
  constructor(options) {
    /** @type {Slide} - The parent slide */
    this.slide = options.slide;

    /** @type {Object} - The presenter object of the subslide */
    this.subslide = options.subslide;

    /** @type {number} - The index of the subslide */
    this.index = options.index;

    /** @type {Object} - The HTML node element of the subslide */
    this.el = options.el;

    /** @type {Object} - The HTML node element of the slide */
    this.pageContainer = options.pageContainer;

    /** @type {Boolean} - Disable number nav for just this slide */
    this.hideNavigation;

    this.subslide.transitions({
      in: this.animateIn.bind(this),
      out: this.animateOut.bind(this)
    });

    if (this.index === 1) {
      this.el.classList.add('active', 'currentpage');
      this.subslide.ready = true;
      this.subslide.animating(false);
      this.pageContainer.classList.add(`subslide-${this.index}`);
    }
  }

  animateIn(otherSlide) {
    this.el.classList.add('active', 'trans', 'trans-in');
    this.subslide.ready = false;
    this.subslide.animating(true);
    this.pageContainer.classList.add(`subslide-${this.index}`);
    this.pageContainer.classList.remove(
      `subslide-${parseInt(otherSlide.el.id.split('-')[1])}`
    );
    this.slide.subslideChanged(this.index);
    this.slide.currentSubslide = this.index;
    if (!this.slide.hideNavigation) {
      this.slide.navigation.update(this.index);
    }
    setTimeout(() => {
      this.subslide.ready = true;
      this.subslide.animating(false);
      this.el.classList.remove('trans', 'trans-in');
      this.el.classList.add('currentpage');
    }, 500);
    return this.subslide;
  }

  animateOut(otherSlide) {
    this.el.classList.add('trans', 'trans-out');
    this.subslide.ready = false;
    this.subslide.animating(true);
    setTimeout(() => {
      this.subslide.ready = true;
      this.subslide.animating(false);
      this.el.classList.remove('trans', 'trans-out', 'active', 'currentpage');
    }, 500);
    return this.subslide;
  }
}
