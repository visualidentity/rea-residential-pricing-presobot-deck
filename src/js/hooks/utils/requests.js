/**
 * Handles api requests
 * @type {Class}
 */
export default class Requests {
  /**
   * Static init to make options/data available to all instances
   * @param  {Object} options Fieldsets options
   * @param  {Object} data    Fieldsets data
   */
  static init(options, data) {
    Requests._options = options;
    Requests._data = data;
  }

  constructor({
    url = null,
    allowEarlierRequests = false,
    options = null,
    data = null
  }) {
    this._local = {
      options,
      data
    };

    this.url = url;
    this.allowEarlierRequests = allowEarlierRequests;
    this.requestsCounter = 0;
    this.requestsRecieved = 0;
  }

  /**
   * Initiate superagent GET request with supplied url and query
   * @param  {String} url        URL to use
   * @param  {Object} [query={}] list of queries
   * @return {Promise}           Promise containing response
   */
  get(options = {}) {
    const { url, query } = _.defaults(options, { url: this.url, query: {} });

    return this.request('GET', url, query).then(({ body }) => {
      let response = [];

      if (
        this.requestsCounter > this.requestsRecieved ||
        this.allowEarlierRequests
      ) {
        this.requestsRecieved = this.requestsCounter;

        if (body && body.results) {
          response = body.results;
        } else if (body) {
          response = body;
        }

        return response;
      }
      return 'Do not update';
    });
  }

  /**
   * Returns the query string generated by a superagent request
   * @param  {Object} query list of queries
   * @return {String}       query string
   */
  createQueryString(query) {
    const request = this.options.superagent('GET', '').query(query);

    return request._query[0];
  }

  /**
   * Superagent request
   * @param  {string} method     type of request (e.g. GET, POST, etc)
   * @param  {String} url        URL to use
   * @param  {Object} [query={}] list of queries
   * @return {Promise}           Promise containing response
   */
  request(method, url = this.url, query = {}) {
    this.requestsCounter++;
    return this.options
      .superagent(method, url)
      .query(query)
      .set(this.data.headers);
  }

  get options() {
    return this._local.options || Requests._options;
  }

  get data() {
    return this._local.data || Requests._data;
  }
}

Requests._options = null;
Requests._data = null;
